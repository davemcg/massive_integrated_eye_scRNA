# Snakefile which:
# 	Downloads bams, putting each in folder by run_accession
# example run with 20 parallel downloads:
# 	 snakemake -j 20 -s ~/git/scEiaD/SnakeDownloadBam --configfile config.yaml
def import_download_info(file, bam_dict = {}):
	with open(file) as file:
		for line in file:
			if line.split('\t')[0] == 'sample_accession':
				continue
			info = line.strip('\n').split('\t')
			srr = info[4]
			if srr not in bam_dict:
				bam_dict[srr] = {'url' : info[3], 'bam' : info[2]}
			else:
				print("Duplicate! " + line)
				stop()
	return(bam_dict)

bam_dict = import_download_info(config['sra_bam_meta'])

# built output file names
output_files = []
for i in bam_dict:
	output_files.append(i + '/' + bam_dict[i]['bam'])

# e.g. "download" mode for running on helix
# or "extract" for running on b2 to bam -> fastq
#
mode = config['mode']

if mode == 'download':
	rule all:
		input:
			output_files

	rule download_bam:
		output:
			'{run_accession}/{bam_file}'
		params:
			 lambda wildcards: bam_dict[wildcards.run_accession]['url']
		shell:
			"""
			mkdir -p {wildcards.run_accession}
			wget -O {output} {params} 
			"""

elif mode == 'extract':
	# we have some bams that come from "outside" (e.g. EGA) the download
	# process. I don't feel like being super clever here. Each run_accession
	# is in its own folder. This should be true no matter how the bam
	# was acquired
	# the input file should simply list the folder names that will be processed
	# one run_accesion/folder per line
	# there is ONE BAM in ONE FOLDER
	# otherwise bad things will happen
	with open(config['run_accessions']) as f:
		run_accessions = f.read().splitlines()
	fastq_dir = 'extracted_fq'
	print(run_accessions)
	rule all:
		input:
			[fastq_dir + '/' + x + '_1.fastq.gz' for x in run_accessions],
			[fastq_dir + '/' + x + '_2.fastq.gz' for x in run_accessions]
	
	rule extract_fq:
		output:
			f = fastq_dir + '/{run_accession}_1.fastq.gz',
			r = fastq_dir + '/{run_accession}_2.fastq.gz'
		shell:
			"""
			./bamtofastq-1.3.2 {wildcards.run_accession}/*bam --reads-per-fastq=999999999999999999 {wildcards.run_accession}
			zcat {wildcards.run_accession}/*R1_001.fastq.gz | gzip > {output.f}
			zcat {wildcards.run_accession}/*R2_001.fastq.gz | gzip > {output.r}
			"""

else:
	print("Mode not recognized")

